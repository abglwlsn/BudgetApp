@model BudgetApp.Models.Transaction

<div class="box-info shadow">
    <h2><strong>Edit</strong> Transaction</h2>
    <div class="row alert alert-info">
            <p><strong>Wait!</strong> Editing an existing transaction is not recommended. For integrity of information, create a new reconciliation transaction to reflect refunds and changes.</p>
    </div>
    @using (Html.BeginForm("Edit", "Transactions"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model=>model.Id)
        <div class="col-md-4">
            <div class="form-group login-input">
                @Html.DropDownList("BankAccountId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BankAccountId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter transaction amount" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label>Income?</label>
                <div class="checkbox">
                    @Html.CheckBox("IsIncome", new {@id="incomeCk" })
                    @Html.ValidationMessageFor(model => model.Income, "", new { @class = "text-danger" })
                    <!--Couldn't use EditorFor because the inherent Checkbox JS is disrupted by the dynamic nature of the page. Instead, we passed a second boolean (IsIncome) to the controller and assigned it to the property. Also manually forced a value change of the checkbox in our JS doc.-->
                </div>
            </div>                  
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label>Budget</label>
                @Html.DropDownList("BudgetItemId", null, htmlAttributes: new { @class = "form-control budget-item" })
                @Html.ValidationMessageFor(model => model.BudgetItemId, "", new { @class = "text-danger" })
                <div class="checkbox">
                    <input id="budgetBool" type="checkbox" />
                    <p>Not a budget item?</p>
                </div>
            </div>
            <div class="form-group" id="category">
                @*<label>Category</label>*@
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label>Reconciled?</label>
                <div class="checkbox">
                    @Html.EditorFor(model => model.Reconciled)
                    @Html.ValidationMessageFor(model => model.Reconciled, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-4">
                
                <div class="form-group">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Give a  transaction description" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <input type="text" value=@Model.Transacted.DateTime.ToShortDateString() name="Transacted" class="datepicker" placeholder="Transaction date" />
                    @Html.ValidationMessageFor(model => model.Transacted, "", new { @class = "text-danger" })
                </div>
                <div class="pull-right form-group">
                    <input type="submit" value="Save Changes" class="btn btn-primary btn-sm" />
                    <a href=@Url.Action("Index", "Transactions") class="btn btn-primary btn-sm">Cancel</a>
                </div>
            </div>
    }
    </div>